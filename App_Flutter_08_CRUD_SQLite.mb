# Aplicativo CRUD Flutter - Estrutura Completa

## üìÅ Estrutura do Projeto

```dart
lib/
‚îú‚îÄ‚îÄ db_helper/
‚îÇ   ‚îú‚îÄ‚îÄ database_conexao.dart    # Configura√ß√£o e conex√£o com SQLite
‚îÇ   ‚îî‚îÄ‚îÄ repositorio.dart         # Opera√ß√µes CRUD no banco
‚îú‚îÄ‚îÄ model/
‚îÇ   ‚îî‚îÄ‚îÄ usuario.dart             # Modelo de dados do usu√°rio
‚îú‚îÄ‚îÄ screens/
‚îÇ   ‚îú‚îÄ‚îÄ form_usuario.dart        # Tela √∫nica para criar/editar usu√°rio
‚îÇ   ‚îî‚îÄ‚îÄ listar_usuarios.dart     # Tela principal com lista de usu√°rios
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ usuario_service.dart     # Provider para gerenciamento de estado
‚îî‚îÄ‚îÄ main.dart                    # Arquivo principal da aplica√ß√£o
```

## üì¶ Depend√™ncias (pubspec.yaml)
```dart
dependencies:
  flutter:
    sdk: flutter
  sqflite: ^2.3.0      # Banco de dados SQLite local
  provider: ^6.1.1     # Gerenciamento de estado
  path: ^1.8.3         # Manipula√ß√£o de caminhos de arquivo
```

##üîß Arquivos do Projeto


### 1. main.dart

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'screens/listar_usuarios.dart';
import 'services/usuario_service.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      // Fornece o UsuarioService para toda a aplica√ß√£o
      create: (context) => UsuarioService(),
      child: MaterialApp(
        title: 'CRUD Usu√°rios',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: ListarUsuarios(),
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}
```

### 2. model/usuario.dart

```dart
/**
 * Modelo de dados do Usu√°rio
 * 
 * Esta classe representa a estrutura de um usu√°rio no banco de dados.
 * Cont√©m m√©todos para converter entre objeto Dart e Map (para SQLite).
 */
class Usuario {
  int? id;           // ID √∫nico do usu√°rio (auto increment)
  String nome;       // Nome completo do usu√°rio
  String email;      // Email do usu√°rio
  int idade;         // Idade do usu√°rio

  // Construtor da classe
  Usuario({
    this.id,
    required this.nome,
    required this.email,
    required this.idade,
  });

  /**
   * Converte um Map (vindo do banco) para objeto Usuario
   * Usado quando recuperamos dados do SQLite
   */
  factory Usuario.fromMap(Map<String, dynamic> map) {
    return Usuario(
      id: map['id'],
      nome: map['nome'],
      email: map['email'],
      idade: map['idade'],
    );
  }

  /**
   * Converte o objeto Usuario para Map
   * Usado quando salvamos dados no SQLite
   */
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'nome': nome,
      'email': email,
      'idade': idade,
    };
  }

  /**
   * M√©todo para facilitar debug e logs
   */
  @override
  String toString() {
    return 'Usuario{id: $id, nome: $nome, email: $email, idade: $idade}';
  }
}
```

### 3. db_helper/database_conexao.dart

```dart
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

/**
 * Classe respons√°vel pela conex√£o e configura√ß√£o do banco SQLite
 * 
 * Implementa o padr√£o Singleton para garantir uma √∫nica inst√¢ncia
 * do banco de dados em toda a aplica√ß√£o.
 */
class DatabaseConexao {
  static final DatabaseConexao _instance = DatabaseConexao._internal();
  static Database? _database;

  // Construtor privado (Singleton)
  DatabaseConexao._internal();

  // Factory constructor que retorna sempre a mesma inst√¢ncia
  factory DatabaseConexao() {
    return _instance;
  }

  /**
   * Getter que retorna a inst√¢ncia do banco
   * Se n√£o existir, cria uma nova conex√£o
   */
  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  /**
   * Inicializa o banco de dados
   * Cria o arquivo do banco e as tabelas necess√°rias
   */
  Future<Database> _initDatabase() async {
    // Obt√©m o caminho padr√£o para bancos de dados no dispositivo
    String databasesPath = await getDatabasesPath();
    String path = join(databasesPath, 'usuarios.db');

    // Abre/cria o banco de dados
    return await openDatabase(
      path,
      version: 1,
      onCreate: _onCreate,
    );
  }

  /**
   * Cria as tabelas do banco quando ele √© criado pela primeira vez
   */
  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE usuarios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        email TEXT NOT NULL UNIQUE,
        idade INTEGER NOT NULL
      )
    ''');
  
    print('Tabela usuarios criada com sucesso!');
  }

  /**
   * Fecha a conex√£o com o banco
   * √ötil para limpeza de recursos
   */
  Future<void> closeDatabase() async {
    if (_database != null) {
      await _database!.close();
      _database = null;
    }
  }
}
```

### 4. db_helper/repositorio.dart

```dart
import 'package:sqflite/sqflite.dart';
import '../model/usuario.dart';
import 'database_conexao.dart';

/**
 * Reposit√≥rio para opera√ß√µes CRUD com usu√°rios
 * 
 * Esta classe implementa o padr√£o Repository, centralizando
 * todas as opera√ß√µes de banco de dados relacionadas aos usu√°rios.
 */
class Repositorio {
  final DatabaseConexao _databaseConexao = DatabaseConexao();

  /**
   * CREATE - Insere um novo usu√°rio no banco
   * Retorna o ID do usu√°rio inserido
   */
  Future<int> inserirUsuario(Usuario usuario) async {
    try {
      final db = await _databaseConexao.database;
      int id = await db.insert(
        'usuarios',
        usuario.toMap(),
        conflictAlgorithm: ConflictAlgorithm.replace,
      );
      print('Usu√°rio inserido com ID: $id');
      return id;
    } catch (e) {
      print('Erro ao inserir usu√°rio: $e');
      throw Exception('Erro ao inserir usu√°rio: $e');
    }
  }

  /**
   * READ - Busca todos os usu√°rios
   * Retorna uma lista de objetos Usuario
   */
  Future<List<Usuario>> buscarTodosUsuarios() async {
    try {
      final db = await _databaseConexao.database;
      final List<Map<String, dynamic>> maps = await db.query(
        'usuarios',
        orderBy: 'nome ASC', // Ordena por nome
      );

      // Converte cada Map em objeto Usuario
      return List.generate(maps.length, (i) {
        return Usuario.fromMap(maps[i]);
      });
    } catch (e) {
      print('Erro ao buscar usu√°rios: $e');
      throw Exception('Erro ao buscar usu√°rios: $e');
    }
  }

  /**
   * READ - Busca um usu√°rio espec√≠fico por ID
   * Retorna null se n√£o encontrar
   */
  Future<Usuario?> buscarUsuarioPorId(int id) async {
    try {
      final db = await _databaseConexao.database;
      final List<Map<String, dynamic>> maps = await db.query(
        'usuarios',
        where: 'id = ?',
        whereArgs: [id],
      );

      if (maps.isNotEmpty) {
        return Usuario.fromMap(maps.first);
      }
      return null;
    } catch (e) {
      print('Erro ao buscar usu√°rio por ID: $e');
      throw Exception('Erro ao buscar usu√°rio: $e');
    }
  }

  /**
   * UPDATE - Atualiza os dados de um usu√°rio existente
   * Retorna o n√∫mero de linhas afetadas
   */
  Future<int> atualizarUsuario(Usuario usuario) async {
    try {
      final db = await _databaseConexao.database;
      int linhasAfetadas = await db.update(
        'usuarios',
        usuario.toMap(),
        where: 'id = ?',
        whereArgs: [usuario.id],
      );
      print('Usu√°rio atualizado. Linhas afetadas: $linhasAfetadas');
      return linhasAfetadas;
    } catch (e) {
      print('Erro ao atualizar usu√°rio: $e');
      throw Exception('Erro ao atualizar usu√°rio: $e');
    }
  }

  /**
   * DELETE - Remove um usu√°rio do banco
   * Retorna o n√∫mero de linhas afetadas
   */
  Future<int> deletarUsuario(int id) async {
    try {
      final db = await _databaseConexao.database;
      int linhasAfetadas = await db.delete(
        'usuarios',
        where: 'id = ?',
        whereArgs: [id],
      );
      print('Usu√°rio deletado. Linhas afetadas: $linhasAfetadas');
      return linhasAfetadas;
    } catch (e) {
      print('Erro ao deletar usu√°rio: $e');
      throw Exception('Erro ao deletar usu√°rio: $e');
    }
  }

  /**
   * Busca usu√°rios por nome (busca parcial)
   * √ötil para implementar funcionalidade de pesquisa
   */
  Future<List<Usuario>> buscarUsuariosPorNome(String nome) async {
    try {
      final db = await _databaseConexao.database;
      final List<Map<String, dynamic>> maps = await db.query(
        'usuarios',
        where: 'nome LIKE ?',
        whereArgs: ['%$nome%'],
        orderBy: 'nome ASC',
      );

      return List.generate(maps.length, (i) {
        return Usuario.fromMap(maps[i]);
      });
    } catch (e) {
      print('Erro ao buscar usu√°rios por nome: $e');
      throw Exception('Erro ao buscar usu√°rios: $e');
    }
  }
}
```

### 5. services/usuario_service.dart

```dart
import 'package:flutter/foundation.dart';
import '../model/usuario.dart';
import '../db_helper/repositorio.dart';

/**
 * Service Provider para gerenciamento de estado dos usu√°rios
 * 
 * Esta classe utiliza o padr√£o Provider do Flutter para gerenciar
 * o estado da aplica√ß√£o. Ela atua como uma camada intermedi√°ria
 * entre a UI e o reposit√≥rio de dados.
 */
class UsuarioService extends ChangeNotifier {
  final Repositorio _repositorio = Repositorio();

  // Lista de usu√°rios carregados na mem√≥ria
  List<Usuario> _usuarios = [];

  // Estados de carregamento e erro
  bool _isLoading = false;
  String? _errorMessage;

  // Getters para acessar os dados privados
  List<Usuario> get usuarios => _usuarios;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  /**
   * Carrega todos os usu√°rios do banco de dados
   * Atualiza a UI automaticamente atrav√©s do notifyListeners()
   */
  Future<void> carregarUsuarios() async {
    _setLoading(true);
    _clearError();
  
    try {
      _usuarios = await _repositorio.buscarTodosUsuarios();
      print('${_usuarios.length} usu√°rios carregados');
    } catch (e) {
      _setError('Erro ao carregar usu√°rios: $e');
      print('Erro no service ao carregar usu√°rios: $e');
    } finally {
      _setLoading(false);
    }
  }

  /**
   * Adiciona um novo usu√°rio
   * Recarrega a lista automaticamente ap√≥s inserir
   */
  Future<bool> adicionarUsuario(Usuario usuario) async {
    _setLoading(true);
    _clearError();
  
    try {
      int id = await _repositorio.inserirUsuario(usuario);
      if (id > 0) {
        await carregarUsuarios(); // Recarrega a lista
        return true;
      }
      return false;
    } catch (e) {
      _setError('Erro ao adicionar usu√°rio: $e');
      print('Erro no service ao adicionar usu√°rio: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /**
   * Atualiza um usu√°rio existente
   * Recarrega a lista automaticamente ap√≥s atualizar
   */
  Future<bool> atualizarUsuario(Usuario usuario) async {
    _setLoading(true);
    _clearError();
  
    try {
      int linhasAfetadas = await _repositorio.atualizarUsuario(usuario);
      if (linhasAfetadas > 0) {
        await carregarUsuarios(); // Recarrega a lista
        return true;
      }
      return false;
    } catch (e) {
      _setError('Erro ao atualizar usu√°rio: $e');
      print('Erro no service ao atualizar usu√°rio: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /**
   * Remove um usu√°rio
   * Recarrega a lista automaticamente ap√≥s deletar
   */
  Future<bool> deletarUsuario(int id) async {
    _setLoading(true);
    _clearError();
  
    try {
      int linhasAfetadas = await _repositorio.deletarUsuario(id);
      if (linhasAfetadas > 0) {
        await carregarUsuarios(); // Recarrega a lista
        return true;
      }
      return false;
    } catch (e) {
      _setError('Erro ao deletar usu√°rio: $e');
      print('Erro no service ao deletar usu√°rio: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /**
   * Busca um usu√°rio espec√≠fico por ID
   */
  Future<Usuario?> buscarUsuarioPorId(int id) async {
    try {
      return await _repositorio.buscarUsuarioPorId(id);
    } catch (e) {
      _setError('Erro ao buscar usu√°rio: $e');
      return null;
    }
  }

  /**
   * Busca usu√°rios por nome
   */
  Future<void> buscarUsuariosPorNome(String nome) async {
    _setLoading(true);
    _clearError();
  
    try {
      if (nome.isEmpty) {
        await carregarUsuarios(); // Se busca vazia, carrega todos
      } else {
        _usuarios = await _repositorio.buscarUsuariosPorNome(nome);
      }
    } catch (e) {
      _setError('Erro ao buscar usu√°rios: $e');
    } finally {
      _setLoading(false);
    }
  }

  // M√©todos privados para gerenciar estado interno
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners(); // Notifica a UI sobre mudan√ßas
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }

  /**
   * Limpa todos os dados em mem√≥ria
   * √ötil para logout ou reset da aplica√ß√£o
   */
  void limparDados() {
    _usuarios.clear();
    _clearError();
    notifyListeners();
  }
}
```


### 6. screens/listar_usuarios.dart

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/usuario_service.dart';
import '../model/usuario.dart';
import 'form_usuario.dart';

/**
 * Tela principal que exibe a lista de usu√°rios
 * 
 * Esta tela consome o UsuarioService atrav√©s do Provider
 * e exibe os dados em uma ListView. Permite navegar para
 * a tela de formul√°rio para criar/editar usu√°rios.
 */
class ListarUsuarios extends StatefulWidget {
  @override
  _ListarUsuariosState createState() => _ListarUsuariosState();
}

class _ListarUsuariosState extends State<ListarUsuarios> {
  final TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // Carrega os usu√°rios assim que a tela √© inicializada
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<UsuarioService>(context, listen: false).carregarUsuarios();
    });
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lista de Usu√°rios'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        actions: [
          // Bot√£o para recarregar a lista
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () {
              Provider.of<UsuarioService>(context, listen: false)
                  .carregarUsuarios();
            },
          ),
        ],
      ),
      body: Column(
        children: [
          // Campo de busca
          Padding(
            padding: EdgeInsets.all(16.0),
            child: TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Buscar usu√°rio',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(),
                suffixIcon: IconButton(
                  icon: Icon(Icons.clear),
                  onPressed: () {
                    _searchController.clear();
                    Provider.of<UsuarioService>(context, listen: false)
                        .carregarUsuarios();
                  },
                ),
              ),
              onChanged: (value) {
                // Busca em tempo real conforme o usu√°rio digita
                Provider.of<UsuarioService>(context, listen: false)
                    .buscarUsuariosPorNome(value);
              },
            ),
          ),
        
          // Lista de usu√°rios
          Expanded(
            child: Consumer<UsuarioService>(
              builder: (context, usuarioService, child) {
                // Exibe loading
                if (usuarioService.isLoading) {
                  return Center(
                    child: CircularProgressIndicator(),
                  );
                }

                // Exibe erro se houver
                if (usuarioService.errorMessage != null) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.error, size: 64, color: Colors.red),
                        SizedBox(height: 16),
                        Text(
                          usuarioService.errorMessage!,
                          style: TextStyle(color: Colors.red),
                          textAlign: TextAlign.center,
                        ),
                        SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: () => usuarioService.carregarUsuarios(),
                          child: Text('Tentar Novamente'),
                        ),
                      ],
                    ),
                  );
                }

                // Exibe mensagem se n√£o h√° usu√°rios
                if (usuarioService.usuarios.isEmpty) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.people_outline, size: 64, color: Colors.grey),
                        SizedBox(height: 16),
                        Text(
                          'Nenhum usu√°rio encontrado',
                          style: TextStyle(fontSize: 18, color: Colors.grey),
                        ),
                        SizedBox(height: 16),
                        ElevatedButton.icon(
                          onPressed: () => _navegarParaFormulario(),
                          icon: Icon(Icons.add),
                          label: Text('Adicionar Primeiro Usu√°rio'),
                        ),
                      ],
                    ),
                  );
                }

                // Exibe a lista de usu√°rios
                return ListView.builder(
                  itemCount: usuarioService.usuarios.length,
                  itemBuilder: (context, index) {
                    final usuario = usuarioService.usuarios[index];
                    return _buildUsuarioCard(usuario, usuarioService);
                  },
                );
              },
            ),
          ),
        ],
      ),
    
      // Bot√£o flutuante para adicionar usu√°rio
      floatingActionButton: FloatingActionButton(
        onPressed: _navegarParaFormulario,
        child: Icon(Icons.add),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
    );
  }

  /**
   * Constr√≥i o card de cada usu√°rio na lista
   */
  Widget _buildUsuarioCard(Usuario usuario, UsuarioService usuarioService) {
    return Card(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 2,
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: Colors.blue,
          child: Text(
            usuario.nome.isNotEmpty ? usuario.nome[0].toUpperCase() : '?',
            style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
          ),
        ),
        title: Text(
          usuario.nome,
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(usuario.email),
            Text('${usuario.idade} anos'),
          ],
        ),
        trailing: PopupMenuButton<String>(
          onSelected: (value) {
            if (value == 'editar') {
              _navegarParaFormulario(usuario: usuario);
            } else if (value == 'deletar') {
              _confirmarDelecao(usuario, usuarioService);
            }
          },
          itemBuilder: (context) => [
            PopupMenuItem(
              value: 'editar',
              child: Row(
                children: [
                  Icon(Icons.edit, color: Colors.blue),
                  SizedBox(width: 8),
                  Text('Editar'),
                ],
              ),
            ),
            PopupMenuItem(
              value: 'deletar',
              child: Row(
                children: [
                  Icon(Icons.delete, color: Colors.red),
                  SizedBox(width: 8),
                  Text('Deletar'),
                ],
              ),
            ),
          ],
        ),
        onTap: () => _navegarParaFormulario(usuario: usuario),
      ),
    );
  }

  /**
   * Navega para a tela de formul√°rio
   * Se usuario for null, ser√° modo cria√ß√£o
   * Se usuario for fornecido, ser√° modo edi√ß√£o
   */
  void _navegarParaFormulario({Usuario? usuario}) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => FormUsuario(usuario: usuario),
      ),
    );
  }

  /**
   * Exibe dialog de confirma√ß√£o antes de deletar
   */
  void _confirmarDelecao(Usuario usuario, UsuarioService usuarioService) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Confirmar Exclus√£o'),
        content: Text('Deseja realmente excluir ${usuario.nome}?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancelar'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              bool sucesso = await usuarioService.deletarUsuario(usuario.id!);
            
              if (sucesso) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Usu√°rio exclu√≠do com sucesso!'),
                    backgroundColor: Colors.green,
                  ),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Erro ao excluir usu√°rio!'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: Text('Excluir', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );
  }
}
```

### 7. screens/form_usuario.dart

```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/usuario_service.dart';
import '../model/usuario.dart';

/**
 * Tela de formul√°rio para criar/editar usu√°rios
 * 
 * Esta tela serve tanto para criar novos usu√°rios quanto para
 * editar usu√°rios existentes. O modo √© determinado pelo par√¢metro
 * 'usuario' passado no construtor.
 */
class FormUsuario extends StatefulWidget {
  final Usuario? usuario; // null = modo cria√ß√£o, objeto = modo edi√ß√£o

  const FormUsuario({Key? key, this.usuario}) : super(key: key);

  @override
  _FormUsuarioState createState() => _FormUsuarioState();
}

class _FormUsuarioState extends State<FormUsuario> {
  final _formKey = GlobalKey<FormState>();

  // Controladores para os campos de texto
  final _nomeController = TextEditingController();
  final _emailController = TextEditingController();
  final _idadeController = TextEditingController();

  // Determina se est√° em modo edi√ß√£o
  bool get _isEditMode => widget.usuario != null;

  @override
  void initState() {
    super.initState();
  
    // Se est√° editando, preenche os campos com os dados existentes
    if (_isEditMode) {
      _nomeController.text = widget.usuario!.nome;
      _emailController.text = widget.usuario!.email;
      _idadeController.text = widget.usuario!.idade.toString();
    }
  }

  @override
  void dispose() {
    // Libera os recursos dos controladores
    _nomeController.dispose();
    _emailController.dispose();
    _idadeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_isEditMode ? 'Editar Usu√°rio' : 'Novo Usu√°rio'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: Consumer<UsuarioService>(
        builder: (context, usuarioService, child) {
          return Padding(
            padding: EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // √çcone e t√≠tulo
                  Icon(
                    _isEditMode ? Icons.edit : Icons.person_add,
                    size: 64,
                    color: Colors.blue,
                  ),
                  SizedBox(height: 16),
                  Text(
                    _isEditMode ? 'Editar dados do usu√°rio' : 'Adicionar novo usu√°rio',
                    style: Theme.of(context).textTheme.headlineSmall,
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 32),

                  // Campo Nome
                  TextFormField(
                    controller: _nomeController,
                    decoration: InputDecoration(
                      labelText: 'Nome Completo',
                      prefixIcon: Icon(Icons.person),
                      border: OutlineInputBorder(),
                    ),
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return 'Por favor, informe o nome';
                      }
                      if (value.trim().length < 2) {
                        return 'Nome deve ter pelo menos 2 caracteres';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 16),

                  // Campo Email
                  TextFormField(
                    controller: _emailController,
                    keyboardType: TextInputType.emailAddress,
                    decoration: InputDecoration(
                      labelText: 'Email',
                      prefixIcon: Icon(Icons.email),
                      border: OutlineInputBorder(),
                    ),
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return 'Por favor, informe o email';
                      }
                      // Valida√ß√£o b√°sica de email
                      if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                        return 'Por favor, informe um email v√°lido';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 16),

                  // Campo Idade
                  TextFormField(
                    controller: _idadeController,
                    keyboardType: TextInputType.number,
                    decoration: InputDecoration(
                      labelText: 'Idade',
                      prefixIcon: Icon(Icons.cake),
                      border: OutlineInputBorder(),
                    ),
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return 'Por favor, informe a idade';
                      }
                      int? idade = int.tryParse(value);
                      if (idade == null) {
                        return 'Por favor, informe uma idade v√°lida';
                      }
                      if (idade < 1 || idade > 120) {
                        return 'Idade deve estar entre 1 e 120 anos';
                      }
                      return null;
                    },
                  ),
                  SizedBox(height: 32),

                  // Bot√£o Salvar
                  ElevatedButton(
                    onPressed: usuarioService.isLoading ? null : _salvarUsuario,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 16),
                    ),
                    child: usuarioService.isLoading
                        ? Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                ),
                              ),
                              SizedBox(width: 12),
                              Text('Salvando...'),
                            ],
                          )
                        : Text(
                            _isEditMode ? 'Atualizar Usu√°rio' : 'Salvar Usu√°rio',
                            style: TextStyle(fontSize: 16),
                          ),
                  ),
                  SizedBox(height: 16),

                  // Bot√£o Cancelar
                  OutlinedButton(
                    onPressed: usuarioService.isLoading ? null : () => Navigator.pop(context),
                    child: Text('Cancelar'),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  /**
   * Salva ou atualiza o usu√°rio
   */
  Future<void> _salvarUsuario() async {
    // Valida o formul√°rio
    if (!_formKey.currentState!.validate()) {
      return;
    }

    final usuarioService = Provider.of<UsuarioService>(context, listen: false);

    // Cria objeto Usuario com os dados do formul√°rio
    final usuario = Usuario(
      id: _isEditMode ? widget.usuario!.id : null,
      nome: _nomeController.text.trim(),
      email: _emailController.text.trim(),
      idade: int.parse(_idadeController.text.trim()),
    );

    bool sucesso;
    String mensagem;

    try {
      if (_isEditMode) {
        // Modo edi√ß√£o
        sucesso = await usuarioService.atualizarUsuario(usuario);
        mensagem = sucesso 
            ? 'Usu√°rio atualizado com sucesso!' 
            : 'Erro ao atualizar usu√°rio!';
      } else {
        // Modo cria√ß√£o
        sucesso = await usuarioService.adicionarUsuario(usuario);
        mensagem = sucesso 
            ? 'Usu√°rio criado com sucesso!' 
            : 'Erro ao criar usu√°rio!';
      }

      // Exibe mensagem de feedback
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(mensagem),
          backgroundColor: sucesso ? Colors.green : Colors.red,
        ),
      );

      // Se sucesso, volta para a tela anterior
      if (sucesso) {
        Navigator.pop(context);
      }
    } catch (e) {
      // Trata erros n√£o capturados
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erro inesperado: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
}
```


## üîç Explica√ß√£o dos Conceitos
### SQLite (sqflite)
- Banco local: Armazena dados diretamente no dispositivo
- Opera√ß√µes CRUD: Create, Read, Update, Delete
- SQL nativo: Permite consultas complexas
- Persist√™ncia: Dados mantidos entre sess√µes do app

### Provider
- Gerenciamento de estado: Centraliza o estado da aplica√ß√£o
- Reatividade: UI atualiza automaticamente quando dados mudam
- ChangeNotifier: Notifica widgets sobre mudan√ßas
- Consumer: Widget que escuta mudan√ßas do Provider

### Arquitetura Utilizada
- Model: Representa os dados (Usuario)
- Repository: Acesso aos dados (opera√ß√µes de banco)
- Service: L√≥gica de neg√≥cio e gerenciamento de estado
- View: Interface do usu√°rio (telas)

## üöÄ Como Usar
- Adicione as depend√™ncias no pubspec.yaml
- Copie todos os arquivos para suas respectivas pastas
- Execute flutter `pub get`
- Execute o aplicativo com `flutter run`

O aplicativo permite criar, listar, editar e excluir usu√°rios com persist√™ncia local usando SQLite.
